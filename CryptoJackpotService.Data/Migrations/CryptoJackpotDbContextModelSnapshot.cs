// <auto-generated />
using System;
using System.Collections.Generic;
using CryptoJackpotService.Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CryptoJackpotService.Data.Migrations
{
    [DbContext(typeof(CryptoJackpotDbContext))]
    partial class CryptoJackpotDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Capital")
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("capital");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<string>("CurrencyName")
                        .HasMaxLength(50)
                        .HasColumnType("text")
                        .HasColumnName("currency_name");

                    b.Property<string>("CurrencySymbol")
                        .HasMaxLength(5)
                        .HasColumnType("text")
                        .HasColumnName("currency_symbol");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Iso2")
                        .HasMaxLength(2)
                        .HasColumnType("text")
                        .HasColumnName("iso2");

                    b.Property<string>("Iso3")
                        .HasMaxLength(3)
                        .HasColumnType("text")
                        .HasColumnName("iso3");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10,8)")
                        .HasColumnName("latitude");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(11,8)")
                        .HasColumnName("longitude");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Native")
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("native");

                    b.Property<string>("NumericCode")
                        .HasMaxLength(3)
                        .HasColumnType("text")
                        .HasColumnName("numeric_code");

                    b.Property<string>("PhoneCode")
                        .HasMaxLength(20)
                        .HasColumnType("text")
                        .HasColumnName("phone_code");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("region");

                    b.Property<string>("Subregion")
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("subregion");

                    b.Property<string>("Tld")
                        .HasMaxLength(10)
                        .HasColumnType("text")
                        .HasColumnName("tld");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("invoice_date");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("text")
                        .HasColumnName("invoice_number");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("sub_total");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("tax");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_invoices");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_invoices_invoice_number");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_invoices_user_id");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.InvoiceDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("sub_total");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("tax");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticket_id");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("unit_price");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_invoice_details");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("ix_invoice_details_invoice_id");

                    b.HasIndex("TicketId")
                        .HasDatabaseName("ix_invoice_details_ticket_id");

                    b.ToTable("invoice_details", (string)null);
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Lottery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date");

                    b.Property<bool>("HasAgeRestriction")
                        .HasColumnType("boolean")
                        .HasColumnName("has_age_restriction");

                    b.Property<string>("LotteryNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("text")
                        .HasColumnName("lottery_no");

                    b.Property<int>("MaxNumber")
                        .HasColumnType("integer")
                        .HasColumnName("max_number");

                    b.Property<int>("MaxTickets")
                        .HasColumnType("integer")
                        .HasColumnName("max_tickets");

                    b.Property<int>("MinNumber")
                        .HasColumnType("integer")
                        .HasColumnName("min_number");

                    b.Property<int?>("MinimumAge")
                        .HasColumnType("integer")
                        .HasColumnName("minimum_age");

                    b.PrimitiveCollection<List<string>>("RestrictedCountries")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("restricted_countries");

                    b.Property<int>("SoldTickets")
                        .HasColumnType("integer")
                        .HasColumnName("sold_tickets");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Terms")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("terms");

                    b.Property<decimal>("TicketPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("ticket_price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int>("TotalSeries")
                        .HasColumnType("integer")
                        .HasColumnName("total_series");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_lotteries");

                    b.HasIndex("LotteryNo")
                        .IsUnique()
                        .HasDatabaseName("ix_lotteries_lottery_no");

                    b.ToTable("lotteries", (string)null);
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.LotteryNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_available");

                    b.Property<Guid>("LotteryId")
                        .HasColumnType("uuid")
                        .HasColumnName("lottery_id");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<int>("Series")
                        .HasColumnType("integer")
                        .HasColumnName("series");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_lottery_numbers");

                    b.HasIndex("TicketId")
                        .HasDatabaseName("ix_lottery_numbers_ticket_id");

                    b.HasIndex("LotteryId", "Number", "Series")
                        .IsUnique()
                        .HasDatabaseName("ix_lottery_numbers_lottery_id_number_series");

                    b.ToTable("lottery_numbers", (string)null);
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Permission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Module")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("module");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Prize", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal?>("CashAlternative")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("cash_alternative");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<decimal>("EstimatedValue")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("estimated_value");

                    b.Property<bool>("IsDeliverable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deliverable");

                    b.Property<bool>("IsDigital")
                        .HasColumnType("boolean")
                        .HasColumnName("is_digital");

                    b.Property<string>("MainImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("text")
                        .HasColumnName("main_image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Dictionary<string, string>>("Specifications")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("specifications");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_prizes");

                    b.ToTable("prizes", (string)null);
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.PrizeImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("text")
                        .HasColumnName("caption");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer")
                        .HasColumnName("display_order");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("text")
                        .HasColumnName("image_url");

                    b.Property<Guid>("PrizeId")
                        .HasColumnType("uuid")
                        .HasColumnName("prize_id");

                    b.Property<Guid?>("PrizeId1")
                        .HasColumnType("uuid")
                        .HasColumnName("prize_id1");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_prize_images");

                    b.HasIndex("PrizeId")
                        .HasDatabaseName("ix_prize_images_prize_id");

                    b.HasIndex("PrizeId1")
                        .HasDatabaseName("ix_prize_images_prize_id1");

                    b.ToTable("prize_images", (string)null);
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.PrizeTier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("LotteryId")
                        .HasColumnType("uuid")
                        .HasColumnName("lottery_id");

                    b.Property<int>("NumberOfWinners")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_winners");

                    b.Property<Guid>("PrizeId")
                        .HasColumnType("uuid")
                        .HasColumnName("prize_id");

                    b.Property<int>("Tier")
                        .HasColumnType("integer")
                        .HasColumnName("tier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_prize_tiers");

                    b.HasIndex("LotteryId")
                        .HasDatabaseName("ix_prize_tiers_lottery_id");

                    b.HasIndex("PrizeId")
                        .HasDatabaseName("ix_prize_tiers_prize_id");

                    b.ToTable("prize_tiers", (string)null);
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.RolePermission", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<long>("PermissionId")
                        .HasColumnType("bigint")
                        .HasColumnName("permission_id");

                    b.Property<int>("AccessLevel")
                        .HasColumnType("integer")
                        .HasColumnName("access_level");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("RoleId", "PermissionId")
                        .HasName("pk_role_permissions");

                    b.HasIndex("PermissionId")
                        .HasDatabaseName("ix_role_permissions_permission_id");

                    b.ToTable("role_permissions", (string)null);
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Ticket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long?>("GiftRecipientId")
                        .HasColumnType("bigint")
                        .HasColumnName("gift_recipient_id");

                    b.Property<bool>("IsGift")
                        .HasColumnType("boolean")
                        .HasColumnName("is_gift");

                    b.Property<Guid>("LotteryId")
                        .HasColumnType("uuid")
                        .HasColumnName("lottery_id");

                    b.Property<decimal>("PurchaseAmount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("purchase_amount");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("purchase_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("transaction_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_tickets");

                    b.HasIndex("GiftRecipientId")
                        .HasDatabaseName("ix_tickets_gift_recipient_id");

                    b.HasIndex("TransactionId")
                        .IsUnique()
                        .HasDatabaseName("ix_tickets_transaction_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_tickets_user_id");

                    b.HasIndex("LotteryId", "UserId", "PurchaseDate")
                        .HasDatabaseName("ix_tickets_lottery_id_user_id_purchase_date");

                    b.ToTable("tickets", (string)null);
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("text")
                        .HasColumnName("currency");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(50)
                        .HasColumnType("text")
                        .HasColumnName("error_code");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(500)
                        .HasColumnType("text")
                        .HasColumnName("error_message");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid")
                        .HasColumnName("invoice_id");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("text")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentProvider")
                        .HasMaxLength(50)
                        .HasColumnType("text")
                        .HasColumnName("payment_provider");

                    b.Property<string>("ProviderTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("provider_transaction_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("status");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("text")
                        .HasColumnName("transaction_number");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_transactions");

                    b.HasIndex("InvoiceId")
                        .IsUnique()
                        .HasDatabaseName("ix_transactions_invoice_id");

                    b.HasIndex("ProviderTransactionId")
                        .HasDatabaseName("ix_transactions_provider_transaction_id");

                    b.HasIndex("TransactionNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_transactions_transaction_number");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_transactions_user_id");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(150)
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("GoogleAccessToken")
                        .HasMaxLength(500)
                        .HasColumnType("text")
                        .HasColumnName("google_access_token");

                    b.Property<string>("GoogleRefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("text")
                        .HasColumnName("google_refresh_token");

                    b.Property<string>("Identification")
                        .HasMaxLength(50)
                        .HasColumnType("text")
                        .HasColumnName("identification");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(200)
                        .HasColumnType("text")
                        .HasColumnName("image_path");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.Property<string>("SecurityCode")
                        .HasMaxLength(50)
                        .HasColumnType("text")
                        .HasColumnName("security_code");

                    b.Property<string>("StatePlace")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text")
                        .HasColumnName("state_place");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_users_country_id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("Identification")
                        .IsUnique()
                        .HasDatabaseName("ix_users_identification");

                    b.HasIndex("Phone")
                        .IsUnique()
                        .HasDatabaseName("ix_users_phone");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_users_role_id");

                    b.HasIndex("SecurityCode")
                        .IsUnique()
                        .HasDatabaseName("ix_users_security_code");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Winner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("ClaimDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("claim_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("text")
                        .HasColumnName("delivery_address");

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("text")
                        .HasColumnName("delivery_status");

                    b.Property<bool>("HasSelectedCashAlternative")
                        .HasColumnType("boolean")
                        .HasColumnName("has_selected_cash_alternative");

                    b.Property<Guid>("LotteryId")
                        .HasColumnType("uuid")
                        .HasColumnName("lottery_id");

                    b.Property<Guid>("PrizeTierId")
                        .HasColumnType("uuid")
                        .HasColumnName("prize_tier_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<Guid>("TicketId")
                        .HasColumnType("uuid")
                        .HasColumnName("ticket_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("WinDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("win_date");

                    b.HasKey("Id")
                        .HasName("pk_winners");

                    b.HasIndex("LotteryId")
                        .HasDatabaseName("ix_winners_lottery_id");

                    b.HasIndex("PrizeTierId")
                        .HasDatabaseName("ix_winners_prize_tier_id");

                    b.HasIndex("TicketId")
                        .HasDatabaseName("ix_winners_ticket_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_winners_user_id");

                    b.ToTable("winners", (string)null);
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Invoice", b =>
                {
                    b.HasOne("CryptoJackpotService.Data.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_invoices_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.InvoiceDetail", b =>
                {
                    b.HasOne("CryptoJackpotService.Data.Database.Models.Invoice", "Invoice")
                        .WithMany("Details")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_invoice_details_invoices_invoice_id");

                    b.HasOne("CryptoJackpotService.Data.Database.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_invoice_details_tickets_ticket_id");

                    b.Navigation("Invoice");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.LotteryNumber", b =>
                {
                    b.HasOne("CryptoJackpotService.Data.Database.Models.Lottery", "Lottery")
                        .WithMany()
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_lottery_numbers_lotteries_lottery_id");

                    b.HasOne("CryptoJackpotService.Data.Database.Models.Ticket", "Ticket")
                        .WithMany("SelectedNumbers")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_lottery_numbers_tickets_ticket_id");

                    b.Navigation("Lottery");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.PrizeImage", b =>
                {
                    b.HasOne("CryptoJackpotService.Data.Database.Models.Prize", "Prize")
                        .WithMany()
                        .HasForeignKey("PrizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prize_images_prizes_prize_id");

                    b.HasOne("CryptoJackpotService.Data.Database.Models.Prize", null)
                        .WithMany("AdditionalImages")
                        .HasForeignKey("PrizeId1")
                        .HasConstraintName("fk_prize_images_prizes_prize_id1");

                    b.Navigation("Prize");
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.PrizeTier", b =>
                {
                    b.HasOne("CryptoJackpotService.Data.Database.Models.Lottery", "Lottery")
                        .WithMany("PrizeTiers")
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_prize_tiers_lotteries_lottery_id");

                    b.HasOne("CryptoJackpotService.Data.Database.Models.Prize", "Prize")
                        .WithMany()
                        .HasForeignKey("PrizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_prize_tiers_prizes_prize_id");

                    b.Navigation("Lottery");

                    b.Navigation("Prize");
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.RolePermission", b =>
                {
                    b.HasOne("CryptoJackpotService.Data.Database.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_permissions_permission_id");

                    b.HasOne("CryptoJackpotService.Data.Database.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_permissions_roles_role_id");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Ticket", b =>
                {
                    b.HasOne("CryptoJackpotService.Data.Database.Models.User", "GiftRecipient")
                        .WithMany()
                        .HasForeignKey("GiftRecipientId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_tickets_users_gift_recipient_id");

                    b.HasOne("CryptoJackpotService.Data.Database.Models.Lottery", "Lottery")
                        .WithMany("Tickets")
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tickets_lotteries_lottery_id");

                    b.HasOne("CryptoJackpotService.Data.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_tickets_users_user_id");

                    b.Navigation("GiftRecipient");

                    b.Navigation("Lottery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Transaction", b =>
                {
                    b.HasOne("CryptoJackpotService.Data.Database.Models.Invoice", "Invoice")
                        .WithOne("Transaction")
                        .HasForeignKey("CryptoJackpotService.Data.Database.Models.Transaction", "InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_invoices_invoice_id");

                    b.HasOne("CryptoJackpotService.Data.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_transactions_users_user_id");

                    b.Navigation("Invoice");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.User", b =>
                {
                    b.HasOne("CryptoJackpotService.Data.Database.Models.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_countries_country_id");

                    b.HasOne("CryptoJackpotService.Data.Database.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_users_roles_role_id");

                    b.Navigation("Country");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Winner", b =>
                {
                    b.HasOne("CryptoJackpotService.Data.Database.Models.Lottery", "Lottery")
                        .WithMany()
                        .HasForeignKey("LotteryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_winners_lotteries_lottery_id");

                    b.HasOne("CryptoJackpotService.Data.Database.Models.PrizeTier", "PrizeTier")
                        .WithMany()
                        .HasForeignKey("PrizeTierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_winners_prize_tiers_prize_tier_id");

                    b.HasOne("CryptoJackpotService.Data.Database.Models.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_winners_tickets_ticket_id");

                    b.HasOne("CryptoJackpotService.Data.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_winners_users_user_id");

                    b.Navigation("Lottery");

                    b.Navigation("PrizeTier");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Country", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Invoice", b =>
                {
                    b.Navigation("Details");

                    b.Navigation("Transaction")
                        .IsRequired();
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Lottery", b =>
                {
                    b.Navigation("PrizeTiers");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Prize", b =>
                {
                    b.Navigation("AdditionalImages");
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Role", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("CryptoJackpotService.Data.Database.Models.Ticket", b =>
                {
                    b.Navigation("SelectedNumbers");
                });
#pragma warning restore 612, 618
        }
    }
}
